<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_Component_InductiveSensor" Id="{8e7ef9e5-be5c-4d5b-9caf-29f0d28584ab}" SpecialFunc="None">
    <Declaration><![CDATA[// function block for inductive sensor with the option of debouncing + rising and falling edge detection.
FUNCTION_BLOCK FB_Component_InductiveSensor IMPLEMENTS  I_Component
VAR_INPUT
	bRawSignal		: BOOL;				// Raw input sensor
	tDebounce		: TIME := T#0MS;	// Debounce time
	tTimeout		: TIME := T#0MS;
	
	sName			: STRING[20];
	bEnable     	: BOOL;
END_VAR

VAR_OUTPUT
	bSensorActive	: BOOL;
	bTimeout		: BOOL;
	bRisingEdge		: BOOL;
	bFallingEdge	: BOOL;
	eState			: E_ComponentState;
	sStatusText 	: STRING[100];
END_VAR

VAR
	tDebounceTimer	: TON;
	tTimeoutTimer	: TON;
	
	bLastStableSignal	: BOOL := bRawSignal;
	bPendingSignal		: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[tDebounceTimer.PT 	:= tDebounce;
tTimeoutTimer.PT	:= tTimeout;

IF bEnable THEN
	CASE eState OF
		E_ComponentState.READY: 	IF bRawSignal <> bLastStableSignal THEN
										bPendingSignal := bRawSignal;
										eState := E_ComponentState.BUSY;
									ELSE
										tTimeoutTimer(IN := FALSE);
										tDebounceTimer(IN := FALSE);
									END_IF
									sStatusText := 'sensor active';
		
		E_ComponentState.BUSY:		tDebounceTimer(IN := TRUE);
									IF bRawSignal <> bPendingSignal THEN			// if signal bounces go back to ready state	
										eState := E_ComponentState.DONE;
									END_IF
			
									IF tDebounceTimer.Q THEN						// if signal stays stable for debounce duration -> trigger timeout
										eState := E_ComponentState.TIMEOUT;
									END_IF
									sStatusText := 'Debouncing sensor';
									
		E_ComponentState.TIMEOUT:	tTimeoutTimer(IN := TRUE);
									
									bRisingEdge  := NOT bLastStableSignal AND bPendingSignal;
	 								bFallingEdge := bLastStableSignal AND NOT bPendingSignal;
											
									bLastStableSignal := bPendingSignal;			// output stable signal
									bSensorActive	  := bLastStableSignal;
									IF tTimeoutTimer.Q THEN
										eState := E_ComponentState.DONE;
									END_IF
									sStatusText := 'sensor timeout';
			
		E_ComponentState.DONE:		tTimeoutTimer(IN := FALSE);
									tDebounceTimer(IN := FALSE);
	END_CASE
END_IF

]]></ST>
    </Implementation>
    <Method Name="M_Halt" Id="{f3238e3e-c657-463e-ba29-1e530a523711}">
      <Declaration><![CDATA[METHOD M_Halt : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[tDebounceTimer(IN := FALSE);
eState := E_ComponentState.HALTED;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ResetEdge" Id="{c361819e-d8ca-4034-91ec-d2f2b326dd4e}">
      <Declaration><![CDATA[METHOD M_ResetEdge : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bRisingEdge 	:= FALSE;
bFallingEdge	:= FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Start" Id="{332d80dd-0194-4918-b2f7-7e712950268d}">
      <Declaration><![CDATA[METHOD M_Start : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState <> E_ComponentState.BUSY AND eState <> E_ComponentState.TIMEOUT THEN
	eState := E_ComponentState.READY;
END_IF;
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stop" Id="{1e590e11-4492-46f6-8aed-701c371c3bb9}">
      <Declaration><![CDATA[METHOD M_Stop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState <> E_ComponentState.BUSY AND eState <> E_ComponentState.TIMEOUT  THEN
	eState := E_ComponentState.DONE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Component_InductiveSensor">
      <LineId Id="391" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="353" Count="1" />
      <LineId Id="388" Count="0" />
      <LineId Id="418" Count="2" />
      <LineId Id="390" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="394" Count="2" />
      <LineId Id="421" Count="0" />
      <LineId Id="415" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="450" Count="1" />
      <LineId Id="449" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="409" Count="2" />
      <LineId Id="423" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="282" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_InductiveSensor.M_Halt">
      <LineId Id="9" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_InductiveSensor.M_ResetEdge">
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="FB_Component_InductiveSensor.M_Start">
      <LineId Id="6" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="7" Count="1" />
    </LineIds>
    <LineIds Name="FB_Component_InductiveSensor.M_Stop">
      <LineId Id="4" Count="0" />
      <LineId Id="6" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>