<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_Component_SingleValveGuarded" Id="{62ac951b-123f-4803-bb89-42aab24e981e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Component_SingleValveGuarded IMPLEMENTS I_Component
VAR_INPUT
	sName			: STRING[50];
	tTimeout		: TIME := T#0S;
END_VAR

VAR_IN_OUT
	bSensExtended	: BOOL;
	bSensRetracted	: BOOL;
	bOutput			: BOOL;
END_VAR

VAR_OUTPUT
	bEnabled     	: BOOL;
	eState			: E_State;
	sStatusText 	: STRING[100];
	
	bIsExtended		: BOOL;
	bIsRetracted	: BOOL;
END_VAR

VAR
	bRetracting		: BOOL;
	bExtending		: BOOL;
	tTimeoutTimer	: TON;

	eLastState		: E_State;
	
	Components		: ARRAY [0..2] OF I_Component;
	
	fbPiston		: FB_Component_SingleValve;
	fbReedExtended	: FB_Component_ReedSwitch;
	fbReedRetracted	: FB_Component_ReedSwitch;
END_VAR

VAR CONSTANT
	DISABLED		: E_State := E_State.DISABLED;
	READY			: E_State := E_State.READY;
	BUSY			: E_State := E_State.BUSY;
	DONE			: E_State := E_State.DONE;
	HALTED			: E_State := E_State.HALTED;
	TIMEOUT			: E_State := E_State.TIMEOUT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[tTimeoutTimer(PT := tTimeout);

fbPiston(sName := '', tTimeout 	:= T#0S, bOutput := bOutput);
fbReedExtended(sName := '', bRawSignal 	:= bSensExtended, tTimeout := T#0S);
fbReedRetracted(sName := '', bRawSignal 	:= bSensRetracted, tTimeout := T#0S);

Components[0] := fbPiston;
Components[1] := fbReedExtended;
Components[2] := fbReedRetracted;

bIsExtended		:= fbReedExtended.bSensorActive;
bIsRetracted	:= fbReedRetracted.bSensorActive;

CASE eState OF
	DISABLED: 	sStatusText := 'piston disabled';
	READY: 		sStatusText :=  CONCAT(CONCAT(SEL(bIsExtended = TRUE, '', 'piston extended and '),SEL(bIsRetracted = TRUE, '', 'piston retracted and ')), 'ready to operate');
	
	BUSY: 		IF bExtending THEN
					sStatusText := 'piston extending';
					IF fbReedExtended.bSensorActive THEN
						eState := TIMEOUT;
					ELSE
						fbPiston.M_Extend();
					END_IF
				END_IF
				IF bRetracting THEN
					sStatusText := 'piston retracting';
					IF fbReedRetracted.bSensorActive THEN
						eState := TIMEOUT;
					ELSE
						fbPiston.M_Retract();
					END_IF
				END_IF
			
	TIMEOUT:	sStatusText := 'piston in timeout';
				bExtending  := FALSE;
				bRetracting := FALSE;
				tTimeoutTimer(IN := TRUE);
				
				IF tTimeoutTimer.Q THEN
					eState := E_State.DONE;
				END_IF
				
	DONE:		sStatusText := 'piston done';
				tTimeoutTimer(IN := FALSE);
				M_Resume();
				
	HALTED:		sStatusText := 'piston halted';
END_CASE]]></ST>
    </Implementation>
    <Method Name="M_Disable" Id="{c6b4994e-a0da-440e-9ca1-3cf41ca8d7bf}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD M_Disable : BOOL
VAR
	idx	: INT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = DONE OR eState = READY THEN
	bEnabled	:= FALSE;
	eState		:= DISABLED;
	
	FOR idx := 0 TO 2 DO
    	Components[idx].M_Disable();
	END_FOR;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Enable" Id="{e1ec62f0-3e96-4b93-9f77-720e89ed850a}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD M_Enable : BOOL

VAR
	idx: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = DISABLED THEN
	bEnabled	:= TRUE;
	eState 		:= READY;
	
	FOR idx := 0 TO 2 DO
    	Components[idx].M_Enable();
	END_FOR;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Extend" Id="{7b5b372b-00b9-4b2c-b2c5-99e037e088b9}">
      <Declaration><![CDATA[METHOD M_Extend : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = READY AND NOT fbReedExtended.bSensorActive THEN
	bExtending 	:= TRUE;
	eState 		:= BUSY;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Halt" Id="{11a97c53-cc9e-4a78-a566-da9303d32528}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD M_Halt : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eLastState 		:= eState;
eState 			:= HALTED;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{f461352e-bff4-4aff-aeeb-e74365824669}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD M_Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Resume" Id="{7dae0265-d6b8-4712-ba2c-690c76d5615a}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD M_Resume : BOOL

VAR
	idx: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eState OF
	DISABLED:	eState 		:= eLastState;
				FOR idx := 0 TO 2 DO
					Components[idx].M_Resume();
				END_FOR;
				
	DONE:		eState := READY;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Retract" Id="{e8c004e6-1cb6-4652-a159-4035bb0a34cc}">
      <Declaration><![CDATA[METHOD M_Retract : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = READY AND NOT fbReedRetracted.bSensorActive  THEN
	bRetracting	:= TRUE;
	eState 		:= BUSY;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stop" Id="{7a43f663-881f-42b2-a615-1ca06524386a}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD M_Stop : BOOL

VAR
	idx: INT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = READY OR eState = DONE THEN
	eState := DONE;
	
	FOR idx := 0 TO 2 DO
    	Components[idx].M_Stop();
	END_FOR;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Component_SingleValveGuarded">
      <LineId Id="56" Count="19" />
      <LineId Id="77" Count="7" />
      <LineId Id="86" Count="19" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_SingleValveGuarded.M_Disable">
      <LineId Id="5" Count="3" />
      <LineId Id="10" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_SingleValveGuarded.M_Enable">
      <LineId Id="5" Count="3" />
      <LineId Id="10" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_SingleValveGuarded.M_Extend">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_SingleValveGuarded.M_Halt">
      <LineId Id="5" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_SingleValveGuarded.M_Reset">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_SingleValveGuarded.M_Resume">
      <LineId Id="14" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_SingleValveGuarded.M_Retract">
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_SingleValveGuarded.M_Stop">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="10" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>