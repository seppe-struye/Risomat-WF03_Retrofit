<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_Component_Servo" Id="{ffbd4ec0-98dd-4a8f-a9df-1ac783cdf63e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Component_Servo IMPLEMENTS I_Component
VAR_INPUT
	sName				: STRING[50];			
	tTimeout			: TIME := T#0MS;
	
	uMaxRPMservo		: INT;		// value set in servo drive ( == RPM before gears!!)
	rGearRatio			: REAL;
END_VAR

VAR_IN_OUT
	bRTO				: BOOL;
	bEnableDrive		: BOOL;
	bResetDrive			: BOOL;
	uAnalogOut			: INT;
	
	(*bSetCounterDone		: BOOL;
	dCount				: DINT;
	bSetCounter			: BOOL;
	dSetCounterValue	: DINT;*)
END_VAR

VAR_OUTPUT
	
	bEnabled			: BOOL;
	eState				: E_State 				:= E_State.DISABLED;
	eServoState			: E_ServoStateMachine 	:= E_ServoStateMachine.IDLE;
	sStatusText 		: STRING[100];
END_VAR

VAR
	tTimeoutTimer		: TON;
	eLastState			: E_State;
	
	uInitialRPM			: INT;
	uTargetRPM			: INT;
	uCurrRPM			: INT;
	uSetRPM				: INT;
	uRPMlimit			: INT := 0;
	uAcceleration		: INT := 0;		// RPM/s
	bDirection			: BOOL;			// FALSE = CW, TRUE = CCW
	tAccelerationTimer	: TON;
END_VAR

VAR CONSTANT
	DISABLED			: E_State := E_State.DISABLED;
	READY				: E_State := E_State.READY;
	BUSY				: E_State := E_State.BUSY;
	DONE				: E_State := E_State.DONE;
	HALTED				: E_State := E_State.HALTED;
	TIMEOUT				: E_State := E_State.TIMEOUT;
	
	IDLE       			: E_ServoStateMachine := E_ServoStateMachine.IDLE;
	HOMING     			: E_ServoStateMachine := E_ServoStateMachine.HOMING;
	HOMED      			: E_ServoStateMachine := E_ServoStateMachine.HOMED;
	RAMPUP     			: E_ServoStateMachine := E_ServoStateMachine.RAMPUP;
	HOLD       			: E_ServoStateMachine := E_ServoStateMachine.HOLD;
	RAMPDOWN   			: E_ServoStateMachine := E_ServoStateMachine.RAMPDOWN;
	FAULT      			: E_ServoStateMachine := E_ServoStateMachine.FAULT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[tTimeoutTimer.PT		:= tTimeout;
tAccelerationTimer.PT 	:= T#30M;

uCurrRPM := REAL_TO_INT((((INT_TO_REAL(ABS(uAnalogOut))/32767)) * uMaxRPMservo) / rGearRatio);

CASE eState OF
	DISABLED: 	sStatusText := 'servo is disabled';
	READY: 		sStatusText := 'servo ready to operate';
	BUSY: 		sStatusText := 'servo operating';
				CASE eServoState OF
					IDLE:
						eServoState := IDLE;
					RAMPUP:
						IF NOT bRTO THEN
							eServoState := FAULT;
						END_IF
						tAccelerationTimer(IN := TRUE);
						IF uCurrRPM = uTargetRPM THEN
							eServoState := HOLD;
						ELSE
							uSetRPM 	:= M_CalculateRPM(	uTargetRPM 		:= uTargetRPM, 
															uInitialRPM 	:= uInitialRPM, 
															rElapsedTime 	:= tAccelerationTimer.ET);
							uAnalogOut 	:= REAL_TO_INT(((uSetRPM * rGearRatio) / uMaxRPMservo) * 32767);
						END_IF
					HOLD:
						IF NOT bRTO THEN
							eServoState := FAULT;
						END_IF
						IF uAnalogOut = 0 THEN
							eServoState := IDLE;
							eState 		:= READY;
						END_IF
					RAMPDOWN:
						IF NOT bRTO THEN
							eServoState := FAULT;
						END_IF
						tAccelerationTimer(IN := TRUE);
						IF uCurrRPM = uTargetRPM THEN
							eServoState := HOLD;
						ELSE
							uSetRPM 	:= M_CalculateRPM(	uTargetRPM 		:= uTargetRPM, 
															uInitialRPM 	:= uInitialRPM, 
															rElapsedTime 	:= tAccelerationTimer.ET);
							uAnalogOut 	:= REAL_TO_INT(((uSetRPM * rGearRatio) / uMaxRPMservo) * 32767);
						END_IF
					FAULT:
						IF bEnableDrive AND NOT bRTO THEN
							bResetDrive := TRUE;
							sStatusText := 'please reset servo drive';
						ELSE
							bResetDrive := FALSE;
							M_SetTargetRPM(RPM := uTargetRPM);
						END_IF
				END_CASE
	TIMEOUT:	sStatusText := '';
	DONE:		sStatusText := '';
	HALTED:		sStatusText := '';
				uAnalogOut 	:= 0;
END_CASE]]></ST>
    </Implementation>
    <Method Name="M_CalculateRPM" Id="{e71f719e-2a3d-4a51-8521-69420927a634}">
      <Declaration><![CDATA[METHOD M_CalculateRPM : INT
VAR_INPUT
	uTargetRPM  	: INT;
	uInitialRPM		: INT;
	rElapsedTime	: TIME;
END_VAR

VAR
	uRPMdiff		: INT; // rpm to add to initial rpm
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[uRPMdiff := REAL_TO_INT((TIME_TO_REAL(rElapsedTime) / 1000) * uAcceleration);

CASE eServoState OF
	RAMPUP:
		M_CalculateRPM := SEL((uInitialRPM + uRPMdiff) >= uTargetRPM, (uInitialRPM + uRPMdiff), uTargetRPM);
	RAMPDOWN:
		M_CalculateRPM := SEL((uInitialRPM - uRPMdiff) <= uTargetRPM, (uInitialRPM - uRPMdiff), uTargetRPM);
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Disable" Id="{1162f5c2-57a8-43b1-b001-97555c860349}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD M_Disable : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = DONE OR eState = READY THEN
	bEnabled	:= FALSE;
	bEnableDrive:= FALSE;
	eState		:= DISABLED;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Enable" Id="{0b6461d7-9c72-4480-b0c7-4f04c006cb47}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD M_Enable : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = DISABLED THEN
	bEnabled	:= TRUE;
	bEnableDrive:= TRUE;
	eState 		:= READY;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Halt" Id="{4d90e9ea-c4c4-4688-bc3f-883478b503e7}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD M_Halt : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eLastState 	:= eState;
eState 		:= HALTED;

uAnalogOut	:= 0;
eServoState := FAULT;
tAccelerationTimer(IN := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Resume" Id="{0ef55e00-fae7-4950-b428-9b3b80a98729}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD M_Resume : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eState OF
	HALTED:		eState := eLastState;
				M_SetTargetRPM(RPM := uTargetRPM);
	DONE:		eState := READY;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetAcceleration" Id="{78d30c80-f4c9-4891-8275-0303f69aba9b}">
      <Declaration><![CDATA[METHOD M_SetAcceleration : BOOL
VAR_INPUT
	uRPMperSec : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[uAcceleration := SEL(uRPMperSec >= 500, uRPMperSec, 500);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetRPMlimit" Id="{8fa04868-0f1b-4aad-a5f3-d61560b4199d}">
      <Declaration><![CDATA[METHOD M_SetRPMlimit : BOOL
VAR_INPUT
	RPM 				: INT;
END_VAR

VAR
	uMaxRPMafterGears	: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[uMaxRPMafterGears 	:= REAL_TO_INT(INT_TO_REAL(uMaxRPMservo) / rGearRatio);
uRPMlimit 			:= SEL(RPM >= uMaxRPMafterGears, RPM, uMaxRPMafterGears);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetTargetRPM" Id="{77e80cf1-83a2-41c2-a47e-e1c57835fa8e}">
      <Declaration><![CDATA[METHOD M_SetTargetRPM : BOOL
VAR_INPUT
	RPM : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = READY OR eState = BUSY THEN
	tAccelerationTimer(IN := FALSE);	// reset the timer
	uTargetRPM 	:= SEL(RPM >= uRPMlimit, RPM, uRPMlimit);
	uInitialRPM	:= uCurrRPM;
	
	IF uTargetRPM > uCurrRPM THEN
		eState 		:= BUSY;
		eServoState := RAMPUP;
	ELSIF uTargetRPM < uCurrRPM THEN
		eState 		:= BUSY;
		eServoState := RAMPDOWN;
	ELSIF uTargetRPM = 0 AND uCurrRPM = 0 THEN
		eState 		:= READY;
		eServoState := IDLE;
	ELSE
		eState 		:= BUSY;
		eServoState := HOLD;
	END_IF
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stop" Id="{4937a094-2c8a-434b-9e0b-55e8bd81c853}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD M_Stop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState <> BUSY OR eState <> HALTED OR eState <> TIMEOUT THEN
	// reset all values to 0
	eState := DONE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Component_Servo">
      <LineId Id="119" Count="2" />
      <LineId Id="94" Count="1" />
      <LineId Id="43" Count="2" />
      <LineId Id="288" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="303" Count="2" />
      <LineId Id="123" Count="2" />
      <LineId Id="127" Count="1" />
      <LineId Id="204" Count="1" />
      <LineId Id="141" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="307" Count="1" />
      <LineId Id="306" Count="0" />
      <LineId Id="316" Count="2" />
      <LineId Id="315" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="310" Count="1" />
      <LineId Id="309" Count="0" />
      <LineId Id="132" Count="4" />
      <LineId Id="201" Count="1" />
      <LineId Id="142" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="297" Count="1" />
      <LineId Id="301" Count="0" />
      <LineId Id="299" Count="1" />
      <LineId Id="302" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="47" Count="2" />
      <LineId Id="264" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_Servo.M_CalculateRPM">
      <LineId Id="24" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_Servo.M_Disable">
      <LineId Id="7" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_Servo.M_Enable">
      <LineId Id="7" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_Servo.M_Halt">
      <LineId Id="7" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_Servo.M_Resume">
      <LineId Id="7" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_Servo.M_SetAcceleration">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_Servo.M_SetRPMlimit">
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_Servo.M_SetTargetRPM">
      <LineId Id="7" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_Servo.M_Stop">
      <LineId Id="7" Count="2" />
      <LineId Id="4" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>