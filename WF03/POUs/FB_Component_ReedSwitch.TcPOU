<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_Component_ReedSwitch" Id="{f639b4a8-9d3e-46fd-a4ee-568d4dd5739a}" SpecialFunc="None">
    <Declaration><![CDATA[// function block for reed switch with the option of debouncing + rising and falling edge detection.
FUNCTION_BLOCK FB_Component_ReedSwitch IMPLEMENTS I_Component
VAR_INPUT
	bRawSignal		: BOOL;				// Raw input sensor
	tDebounce		: TIME := T#0MS;	// Debounce time
	tTimeout		: TIME := T#0MS;
	
	sName			: STRING[20];
	bEnable     	: BOOL;
END_VAR

VAR_OUTPUT
	bSensorActive	: BOOL;
	bTimeout		: BOOL;
	eState			: E_State;
	sStatusText 	: STRING[100];
END_VAR

VAR
	tDebounceTimer	: TON;
	tTimeoutTimer	: TON;
	
	bLastStableSignal: BOOL;
	bPendingSignal: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[tDebounceTimer.PT 	:= tDebounce;
tTimeoutTimer.PT	:= tTimeout;

IF bEnable THEN
	CASE eState OF
		E_State.READY: 	IF bRawSignal <> bLastStableSignal THEN
										bPendingSignal := bRawSignal;
										eState := E_State.BUSY;
									ELSE
										tTimeoutTimer(IN := FALSE);
										tDebounceTimer(IN := FALSE);
									END_IF
									sStatusText := 'sensor active';
		
		E_State.BUSY:		tDebounceTimer(IN := TRUE);
									IF bRawSignal <> bPendingSignal THEN			// if signal bounces go back to ready state	
										eState := E_State.DONE;
									END_IF
			
									IF tDebounceTimer.Q THEN						// if signal stays stable for debounce duration -> trigger timeout
										eState := E_State.TIMEOUT;
									END_IF
									sStatusText := 'Debouncing sensor';
									
		E_State.TIMEOUT:	tTimeoutTimer(IN := TRUE);
									bLastStableSignal := bPendingSignal;			// output stable signal
									bSensorActive := bLastStableSignal;
									IF tTimeoutTimer.Q THEN
										eState := E_State.DONE;
									END_IF
									sStatusText := 'sensor timeout';
			
		E_State.DONE:		tTimeoutTimer(IN := FALSE);
									tDebounceTimer(IN := FALSE);
	END_CASE
END_IF

]]></ST>
    </Implementation>
    <Method Name="M_Halt" Id="{c94396e9-4b2a-428e-b504-c709afbc748b}">
      <Declaration><![CDATA[METHOD M_Halt : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[tDebounceTimer(IN := FALSE);
eState := E_State.HALTED;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Start" Id="{3ee6110b-c203-4bb9-9caa-b0b18392f854}">
      <Declaration><![CDATA[METHOD M_Start : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState <> E_State.BUSY AND eState <> E_State.TIMEOUT THEN
	eState := E_State.READY;
END_IF;
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stop" Id="{60cdd494-a322-4122-a75f-cf6898b5dc26}">
      <Declaration><![CDATA[METHOD M_Stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState <> E_State.BUSY AND eState <> E_State.TIMEOUT  THEN
	eState := E_State.DONE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Component_ReedSwitch">
      <LineId Id="214" Count="36" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_ReedSwitch.M_Halt">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_ReedSwitch.M_Start">
      <LineId Id="14" Count="2" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_ReedSwitch.M_Stop">
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>